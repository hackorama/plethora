package com.hackorama.plethora.server.snmp;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * Template MIB file based on ASN.1 RFC 2578, RFC 1155, RFC 1213, RFC 1157. Partial implementation with only a selected
 * subset of common definitions as required to represent the plethora defined metrics model.
 * 
 * @author Kishan Thomas <kishan.thomas@gmail.com>
 * 
 */
public final class Template {

    public static final String EOL = System.getProperty("line.separator");
    public static final int TAB_SIZE = 2;

    public static final String HEADER_SECTION = "--- Management Information Base for SNMP Network Management" + EOL
            + "--- Dynamically generated by Plethora agent at <DATE>" + EOL
            + "--- Please make sure to use the latest version <URL>" + EOL + "<NAME>-MIB DEFINITIONS ::= BEGIN" + EOL
            + EOL + "IMPORTS" + EOL + "  enterprises FROM RFC1155-SMI" + EOL + "  OBJECT-TYPE FROM RFC-1212" + EOL
            + "  DisplayString FROM RFC1213-MIB;" + EOL + EOL;
    public static final String OID_LINE = "<NAME>	OBJECT IDENTIFIER ::= {<PARENT> <ID>}" + EOL;
    public static final String OBJECT_SECTION = "<NAME> OBJECT-TYPE" + EOL + "  SYNTAX  <SYNTAX>" + EOL
            + "  ACCESS  read-only" + EOL + "  STATUS  mandatory" + EOL + "  DESCRIPTION" + EOL
            + "    \"<DESCRIPTION>\"" + EOL + "  ::= {<PARENT> <ID>}" + EOL + EOL;
    public static final String END_LINE = "END" + EOL;

    // As defined by RFC 2578 Section 3.7
    private static final String[] RESERVED_KEYWORD_ARRAY = new String[] { "ABSENT", "ACCESS", "AGENT-CAPABILITIES",
            "ANY", "APPLICATION", "AUGMENTS", "BEGIN", "BIT", "BITS", "BOOLEAN", "BY", "CHOICE", "COMPONENT",
            "COMPONENTS", "CONTACT-INFO", "CREATION-REQUIRES", "Counter32", "Counter64", "DEFAULT", "DEFINED",
            "DEFINITIONS", "DEFVAL", "DESCRIPTION", "DISPLAY-HINT", "END", "ENUMERATED", "ENTERPRISE", "EXPLICIT",
            "EXPORTS", "EXTERNAL", "FALSE", "FROM", "GROUP", "Gauge32", "IDENTIFIER", "IMPLICIT", "IMPLIED", "IMPORTS",
            "INCLUDES", "INDEX", "INTEGER", "Integer32", "IpAddress", "LAST-UPDATED", "MANDATORY-GROUPS", "MAX",
            "MAX-ACCESS", "MIN", "MIN-ACCESS", "MINUS-INFINITY", "MODULE", "MODULE-COMPLIANCE", "MODULE-IDENTITY",
            "NOTIFICATION-GROUP", "NOTIFICATION-TYPE", "NOTIFICATIONS", "NULL", "OBJECT", "OBJECT-GROUP",
            "OBJECT-IDENTITY", "OBJECT-TYPE", "OBJECTS", "OCTET", "OF", "OPTIONAL", "ORGANIZATION", "Opaque",
            "PLUS-INFINITY", "PRESENT", "PRIVATE", "PRODUCT-RELEASE", "REAL", "REFERENCE", "REVISION", "SEQUENCE",
            "SET", "SIZE", "STATUS", "STRING", "SUPPORTS", "SYNTAX", "TAGS", "TEXTUAL-CONVENTION", "TRAP-TYPE", "TRUE",
            "TimeTicks", "UNITS", "UNIVERSAL", "Unsigned32", "VARIABLES", "VARIATION", "WITH", "WRITE-SYNTAX" };

    public static final Set<String> RESERVED_KEYWORD_SET = new HashSet<String>(Arrays.asList(RESERVED_KEYWORD_ARRAY));

    private static final String COMMON_APPEND = "metric";
    private static final int DESCRIPTOR_MAXLENGTH = 64;

    /**
     * Optimistically (not ensuring uniqueness, may create duplicates) try to make a given string to valid descriptor as
     * defined by RFC 2578 Section 3.1 except the initial lower case recommendation.
     * 
     * ... identifier consists of one or more letters or digits, and its initial character must be a lower-case letter
     * ... ... the descriptor shall be unique and mnemonic, and shall not exceed 64 characters in length. (However,
     * descriptors longer than 32 characters are not recommended.) ...
     * 
     * @param value
     *            The original descriptor to be validated
     * @return A valid descriptor
     */
    public static String validDescriptor(String value) {
        String alphaNumericOnly = value.replaceAll("[^A-Za-z0-9]", "");
        for (String key : RESERVED_KEYWORD_SET) { // or contains with compare
            if (alphaNumericOnly.equalsIgnoreCase(key)) {
                alphaNumericOnly = COMMON_APPEND.concat(alphaNumericOnly);
                break;
            }
        }
        return alphaNumericOnly.length() > DESCRIPTOR_MAXLENGTH ? alphaNumericOnly.substring(0, DESCRIPTOR_MAXLENGTH)
                : alphaNumericOnly;
    }

    private Template() {
        // no public instances
    }
}
